{"version":3,"sources":["config/keys.js","config/dev.js","reducers/index.js","reducers/dataReducer.js","constants/actionTypes.js","config/firebase.js","actions/index.js","components/Message/Message.js","components/ChatInput/ChatInput.js","components/Chatroom/Chatroom.js","components/Chatroom/ChatroomContainer.js","components/StartPage/StartPage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","require","FirebaseConfig","apiKey","authDomain","databaseURL","combineReducers","dataReducer","state","action","type","payload","firebase","messagesRef","ref","child","addMessages","newMessage","dispatch","a","push","set","Message","username","message","className","ChatInput","props","onSubmit","e","preventDefault","onSubmitMessage","setState","placeholder","value","this","onChange","target","React","Component","URL","Chatroom","addMessage","messages","submitMessage","messageString","console","log","ws","send","JSON","stringify","ls","get","WebSocket","formMessage","createRef","onopen","onmessage","evt","parse","data","onclose","map","index","key","connect","bindActionCreators","StartPage","formLogin","defaultValue","required","to","onClick","current","reportValidity","window","location","store","createStore","reducers","applyMiddleware","reduxThunk","App","params","style","position","top","left","width","height","backgroundColor","zIndex","exact","path","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fd76c45d.chunk.js","sourcesContent":["if (process.env.NODE_ENV === \"production\") {\n  module.exports = require(\"./dev\");\n} else {\n  module.exports = require(\"./dev\");\n}","export const FirebaseConfig = {\n  apiKey: \"AIzaSyBDI6ab5Y5-FCIScpkw_9SjKu-SsICTYAs\",\n  authDomain: \"war-room-9f2a7.firebaseapp.com\",\n  databaseURL: \"https://war-room-9f2a7.firebaseio.com/\"\n};","import { combineReducers } from 'redux';\nimport dataReducer from './dataReducer';\n\nexport default combineReducers({\n  dataReducer\n});","import { GET_MESSAGES } from \"../constants/actionTypes\";\n\nexport default (state = {}, action) => {\n  switch (action.type) {\n    case GET_MESSAGES:\n      return action.payload;\n    default:\n      return state;\n  }\n};","export const GET_MESSAGES = 'GET_MESSAGES';\n\nexport default GET_MESSAGES;","import * as firebase from \"firebase\";\n\nimport { FirebaseConfig } from \"../config/keys\";\nfirebase.initializeApp(FirebaseConfig);\n\nconst databaseRef = firebase.database().ref();\nexport const messagesRef = databaseRef.child(\"messages\");","import { messagesRef } from \"../config/firebase\";\nimport GET_MESSAGES from '../constants/actionTypes';\n\nexport const addMessages = newMessage => async dispatch => {\n  messagesRef.push().set(newMessage);\n};\n\nexport const getMessages = () => async dispatch => {\n  messagesRef.on(\"value\", snapshot => {\n    dispatch({\n      type: GET_MESSAGES,\n      payload: snapshot.val()\n    });\n  });\n};","import React from 'react';\n\nimport './Message.scss';\n\nconst CN = 'message';\n\nconst Message = ({ username, message }) => (\n  <span className={`${CN}__text`}>\n    <strong>{username}</strong>: <em>{message}</em>\n  </span>\n);\n\nexport default Message;\n","import React from 'react';\n\nimport './ChatInput.scss';\n\nconst CN = 'chat-input';\n\nclass ChatInput extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      message: ''\n    }\n  }\n\n  render() {\n    return (\n      <form\n        action=\".\"\n        onSubmit={e => {\n          e.preventDefault()\n          this.props.onSubmitMessage(this.state.message)\n          this.setState({ message: '' })\n        }}\n      >\n        <input\n          className={`${CN}__message-input`}\n          type=\"text\"\n          placeholder={'Enter message...'}\n          value={this.state.message}\n          onChange={e => this.setState({ message: e.target.value })}\n        />\n        <input\n          className={`${CN}__send-btn`}\n          type=\"submit\"\n          value={'Send'}\n        />\n      </form>\n    )\n  }\n}\n\nexport default ChatInput","import React from 'react';\nimport ls from \"local-storage\";\n\nimport Message from '../Message';\nimport ChatInput from '../ChatInput';\n\nimport './Chatroom.scss';\n\nconst CN = 'chatroom';\n// const URL = 'ws://localhost:8080'\nconst URL = 'wss://server-www.herokuapp.com/';\n\nclass Chatroom extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      username: ls.get('username') || 'Groot',\n      messages: [],\n    }\n\n    this.ws = new WebSocket(URL);\n    this.formMessage = React.createRef();\n    this.username = ls.get('username');\n    console.log(this.state)\n  }\n\n  componentDidMount() {\n    this.ws.onopen = () => {\n      console.log('connected');\n    }\n\n    this.ws.onmessage = evt => {\n      const message = JSON.parse(evt.data);\n      this.addMessage(message);\n      console.log(this.state)\n    }\n\n    this.ws.onclose = () => {\n      console.log('disconnected')\n      this.setState({\n        ws: new WebSocket(URL),\n      })\n    }\n  }\n\n  addMessage = message =>\n    this.setState(state => ({ messages: [message, ...state.messages] }))\n\n  submitMessage = messageString => {\n    const message = { username: this.state.username, message: messageString };\n    console.log(message);\n    this.ws.send(JSON.stringify(message));\n    this.addMessage(message);\n    const { addMessages } = this.props;\n    console.log(addMessages)\n    addMessages(message);\n  }\n\n  render() {\n    return (\n      <div className={`${CN}__wrapper`}>\n        <div className={`${CN}__messages`}>\n        <ChatInput\n          ws={this.ws}\n          onSubmitMessage={messageString => this.submitMessage(messageString)}\n        />\n        <div className={`${CN}__messages-container`}>\n          {this.state.messages.map((message, index) =>\n            <Message\n              key={index}\n              message={message.message}\n              username={message.username}\n            />,\n          )}\n        </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Chatroom;","import { connect } from \"react-redux\";\nimport { bindActionCreators } from 'redux';\nimport { addMessages } from \"../../actions\";\n\nimport Chatroom from './Chatroom';\n\nconst mapDispatchToProps = (dispatch) => ({\n  addMessages: bindActionCreators(addMessages, dispatch),\n});\n\nexport default connect(null, mapDispatchToProps)(Chatroom);","import React from 'react';\nimport ls from \"local-storage\";\nimport { Link } from \"react-router-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nimport './StartPage.scss';\n\nconst CN = 'start-page';\n\nconst StartPage = () => {\n  const formLogin = React.createRef();\n\n  const handleClick = () => {\n    const username = formLogin.current[0].value;\n    const isInputValid = formLogin.current.reportValidity();\n    if (isInputValid) {\n      ls.set('username', username);\n      window.location = '/chat';\n    }\n  }\n\n  const username = ls.get('username');\n\n  return (\n    <Router>\n    <div className={`${CN}__wrapper`}>\n      <p className={`${CN}__text`}>Please enter your username:</p>\n      <form\n        className={`${CN}__input-wrapper`}\n        ref={formLogin}\n      >\n        <input\n          className={`${CN}__input`}\n          defaultValue={username}\n          type=\"text\"\n          required\n        >\n        </input>\n        <Link to=\"/chat\">\n          <button className={`${CN}__button`} onClick={handleClick}>Start chatting >>></button>\n        </Link>\n      </form>\n    </div>\n    </Router>\n  )\n}\n\nexport default StartPage;\n","import React from 'react';\nimport Particles from 'react-particles-js';\nimport reducers from './reducers';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n} from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport reduxThunk from \"redux-thunk\";\n\nimport Chatroom from './components/Chatroom';\nimport StartPage from './components/StartPage';\n\nimport './App.scss';\n\nconst store = createStore(reducers, {}, applyMiddleware(reduxThunk));\nconst CN = 'app';\n\nconst App = () => {\n  return (\n    <div className={CN}>\n        <Provider store={store}>\n        <Router>\n            {/* <StartPage /> */}\n            <Particles \n                params={{\n                \"particles\": {\n                    \"number\": {\n                        \"value\": 150,\n                        \"density\": {\n                            \"enable\": true,\n                            \"value_area\": 1803.4120608655228\n                        }\n                    },\n                    \"color\": {\n                        \"value\": \"#ffffff\"\n                    },\n                    \"shape\": {\n                        \"type\": \"circle\",\n                        \"stroke\": {\n                            \"width\": 2,\n                            \"color\": \"#000000\"\n                        },\n                        \"polygon\": {\n                            \"nb_sides\": 4\n                        },\n                        \"image\": {\n                            \"src\": \"img/github.svg\",\n                            \"width\": 100,\n                            \"height\": 100\n                        }\n                    },\n                    \"opacity\": {\n                        \"value\": 0.4008530152163807,\n                        \"random\": false,\n                        \"anim\": {\n                            \"enable\": false,\n                            \"speed\": 1,\n                            \"opacity_min\": 0.1,\n                            \"sync\": false\n                        }\n                    },\n                    \"size\": {\n                        \"value\": 1.5,\n                        \"random\": true,\n                        \"anim\": {\n                            \"enable\": false,\n                            \"speed\": 40,\n                            \"size_min\": 0.1,\n                            \"sync\": false\n                        }\n                    },\n                    \"line_linked\": {\n                        \"enable\": true,\n                        \"distance\": 300,\n                        \"color\": \"#ffffff\",\n                        \"opacity\": 0.3687847739990702,\n                        \"width\": 0.6413648243462091\n                    },\n                    \"move\": {\n                        \"enable\": true,\n                        \"speed\": 6,\n                        \"direction\": \"none\",\n                        \"random\": false,\n                        \"straight\": false,\n                        \"out_mode\": \"out\",\n                        \"bounce\": false,\n                        \"attract\": {\n                            \"enable\": false,\n                            \"rotateX\": 600,\n                            \"rotateY\": 1200\n                        }\n                    }\n                },\n                \"interactivity\": {\n                    \"detect_on\": \"window\",\n                    \"events\": {\n                        \"onhover\": {\n                            \"enable\": true,\n                            \"mode\": \"repulse\"\n                        },\n                        \"onclick\": {\n                            \"enable\": false,\n                            \"mode\": \"bubble\"\n                        },\n                        \"resize\": true\n                    },\n                    \"modes\": {\n                        \"grab\": {\n                            \"distance\": 400,\n                            \"line_linked\": {\n                                \"opacity\": 1\n                            }\n                        },\n                        \"bubble\": {\n                            \"distance\": 400,\n                            \"size\": 40,\n                            \"duration\": 2,\n                            \"opacity\": 8,\n                            \"speed\": 3\n                        },\n                        \"repulse\": {\n                            \"distance\": 100,\n                            \"duration\": 0.4\n                        },\n                        \"push\": {\n                            \"particles_nb\": 4\n                        },\n                        \"remove\": {\n                            \"particles_nb\": 2\n                        }\n                    }\n                },\n                \"retina_detect\": true\n                }}\n                style={{\n                    position: \"absolute\",\n                    top: 0,\n                    left: 0,\n                    width: \"100%\",\n                    height: \"100%\",\n                    backgroundColor: 'black',\n                    zIndex: -1\n                }}\n            />\n            <Switch>\n            <Route exact path=\"/\">\n                <StartPage />\n            </Route>\n            <Route exact path=\"/chat\">\n                <Chatroom />\n            </Route>\n            </Switch>\n        </Router>\n    </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}